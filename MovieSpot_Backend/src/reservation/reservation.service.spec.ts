// import { Injectable, BadRequestException, NotFoundException, UnauthorizedException } from '@nestjs/common';
// import { InjectRepository } from '@nestjs/typeorm';
// import { Repository } from 'typeorm';
// import { Reservation } from './entities/reservation.entity';
// import { User } from '../user/entities/user.entity';
// import axios from 'axios'; // Utilisation de axios pour appeler l'API externe
// import { LessThan, MoreThan } from 'typeorm'; // Ajoute cette ligne pour importer les op√©rateurs

// @Injectable()
// export class ReservationService {
//   constructor(
//     @InjectRepository(Reservation)
//     private reservationRepository: Repository<Reservation>,
    
//     @InjectRepository(User)
//     private userRepository: Repository<User>,
//   ) {}

//   /**
//    * ‚úÖ Cr√©er une r√©servation
//    */
//   async createReservation(userPayload: { sub: number }, movieId: number, startTime: Date) {
//     console.log('üë§ JWT Payload re√ßu:', userPayload); // üîç DEBUG

//     if (!userPayload || !userPayload.sub) {
//       throw new UnauthorizedException('‚ùå Erreur d\'authentification: Utilisateur introuvable dans le token.');
//     }

//     const user = await this.userRepository.findOne({ where: { id: userPayload.sub } });

//     if (!user) {
//       throw new NotFoundException('‚ùå Utilisateur non trouv√© en base de donn√©es.');
//     }

//     // Appel √† l'API externe pour r√©cup√©rer les informations du film, y compris la dur√©e
//     let movieRuntime: number;
//     try {
//       const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}`, {
//         params: {
//           api_key: process.env.TMDB_API_KEY, // Vous devrez d√©finir la cl√© API dans votre environnement
//         },
//       });
//       movieRuntime = response.data.runtime; // Dur√©e du film en minutes
//     } catch (error) {
//       throw new NotFoundException('‚ùå Impossible de r√©cup√©rer les informations du film depuis TMDb.');
//     }

//     if (!movieRuntime) {
//       throw new BadRequestException('‚ùå Dur√©e du film introuvable.');
//     }

//     // Calcul de l'heure de fin en fonction de la dur√©e du film
//     const endTime = new Date(startTime);
//     endTime.setMinutes(endTime.getMinutes() + movieRuntime); // Ajout de la dur√©e du film en minutes

//     // V√©rification des conflits de r√©servation
//     const conflictingReservation = await this.reservationRepository.findOne({
//       where: { 
//         user,
//         startTime: LessThan(endTime),
//         endTime: MoreThan(startTime),
//       },
//     });

//     if (conflictingReservation) {
//       throw new BadRequestException('‚ùå Conflit de r√©servation : Un film est d√©j√† r√©serv√© √† cet horaire.');
//     }

//     const reservation = this.reservationRepository.create({
//       user,
//       movieId,
//       movieTitle: "Titre du Film", // Ici, tu devrais ajouter la r√©cup√©ration du titre du film
//       startTime,
//       endTime,
//     });

//     return await this.reservationRepository.save(reservation);
//   }

//   /**
//    * ‚úÖ R√©cup√©rer les r√©servations de l'utilisateur
//    */
//   async getUserReservations(userPayload: { sub: number }) {
//     console.log('üîé R√©cup√©ration des r√©servations pour:', userPayload);

//     if (!userPayload || !userPayload.sub) {
//       throw new UnauthorizedException('‚ùå Erreur d\'authentification: Utilisateur introuvable dans le token.');
//     }

//     const user = await this.userRepository.findOne({ where: { id: userPayload.sub } });

//     if (!user) {
//       throw new NotFoundException('‚ùå Utilisateur non trouv√©.');
//     }

//     return await this.reservationRepository.find({ where: { user } });
//   }

//   /**
//    * ‚úÖ Annuler une r√©servation
//    */
//   async cancelReservation(userPayload: { sub: number }, id: number) {
//     console.log('‚ùå Suppression de la r√©servation:', id);

//     if (!userPayload || !userPayload.sub) {
//       throw new UnauthorizedException('‚ùå Erreur d\'authentification: Utilisateur introuvable dans le token.');
//     }

//     const user = await this.userRepository.findOne({ where: { id: userPayload.sub } });

//     if (!user) {
//       throw new NotFoundException('‚ùå Utilisateur non trouv√©.');
//     }

//     const reservation = await this.reservationRepository.findOne({ where: { id, user } });

//     if (!reservation) {
//       throw new NotFoundException('‚ùå R√©servation introuvable.');
//     }

//     await this.reservationRepository.remove(reservation);
//     return { message: '‚úÖ R√©servation annul√©e avec succ√®s.' };
//   }
// }
